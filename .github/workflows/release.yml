name: Create Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version'
        required: true


jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: 'main'

      - name: Update Version in PerformanceSuite.podspec
        run: |
          VERSION_NAME="${{ github.event.inputs.version }}"
          if [[ ! "${VERSION_NAME}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "The version ${VERSION_NAME} doesn't match the format X.X.X. Exiting"
            exit 0
          fi

          sed -i "s/\(s.version\s*=\s*\)'.*'$/\1'$VERSION_NAME'/" PerformanceSuite.podspec
          

      - name: Push Changes
        run: |
          VERSION_NAME="${{ github.event.inputs.version }}"
          git add PerformanceSuite.podspec
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git commit -m "Update version to $VERSION_NAME"
          git tag -f -a $VERSION_NAME HEAD -m "Update version to $VERSION_NAME"
          git push --follow-tags

      - name: Get Commit Messages
        id: get_commit_messages
        run: |
          VERSION_NAME="${{ github.event.inputs.version }}"
          PREVIOUS_TAG=$(git show-ref --tags | grep -o 'refs/tags/[0-9]*\.[0-9]*\.[0-9]*' | cut -d '/' -f 3 | sort -rV | sed -n '2p')
          COMMIT_MESSAGES=$(git log --format=%B ${PREVIOUS_TAG}..${TAG_NAME})
          COMMIT_MESSAGES="${COMMIT_MESSAGES//'%'/'%25'}"
          COMMIT_MESSAGES="${COMMIT_MESSAGES//$'\n'/'%0A'}"
          COMMIT_MESSAGES="${COMMIT_MESSAGES//$'\r'/'%0D'}"
          echo "commit_messages=$COMMIT_MESSAGES" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.version }}
          release_name: ${{ github.event.inputs.version }}
          body: ${{ steps.get_commit_messages.outputs.commit_messages }}
          draft: false
          prerelease: false
