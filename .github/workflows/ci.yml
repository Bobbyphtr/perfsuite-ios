name: PerformanceSuite Tests

on: 
  push:
    branches: 
      - main
  pull_request:
    branches: 
      - '*'
jobs:
  test:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: SwiftLint
        run:
          Pods/SwiftLint/swiftlint
      - name: Build PerformanceApp
        env:
          scheme: PerformanceApp
          platform: iOS Simulator
          workspace: PerformanceApp.xcworkspace
        run: |
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          xcodebuild build -scheme "$scheme" -workspace "$workspace" -destination "platform=$platform,name=$device"
      - name: Test PerformanceSuite
        env:
          scheme: PerformanceApp
          platform: iOS Simulator
          workspace: PerformanceApp.xcworkspace
        run: |
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          xcodebuild test -scheme "$scheme" -workspace "$workspace" -destination "platform=$platform,name=$device" -test-iterations 30 -run-tests-until-failure -enableCodeCoverage YES
      - name: Slather
        run: |
          gem install slather
          slather coverage --simple-output | grep -E '^Test Coverage|^Tested ' > code_coverage.txt
          slather coverage --cobertura-xml

      - name: Upload code_coverage.txt
        uses: actions/upload-artifact@v3
        with:
          name: code_coverage.txt
          path: code_coverage.txt

      - name: Upload cobertura.xml
        uses: actions/upload-artifact@v3
        with:
          name: cobertura.xml
          path: coverage/cobertura.xml

  coverage-report:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Download cobertura.xml
        uses: actions/download-artifact@v3
        with:
          name: cobertura.xml

      - name: Code coverage markdown report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: cobertura.xml
          badge: true
          fail_below_min: true
          format: markdown
          hide_branch_rate: false
          hide_complexity: true
          output: both
          thresholds: '80 85'

      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: code-coverage-results.md

      - name: Upload code-coverage-results.md
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage-results.md
          path: code-coverage-results.md


  coverage-badge:
    if: github.ref == 'refs/heads/main'
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Switch to badges branch
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git checkout badges
      - name: Download code_coverage.txt
        uses: actions/download-artifact@v3
        with:
          name: code_coverage.txt
      - name: Commit code_coverage.txt
        run: |
          if [[ `git status --porcelain` ]]; then
            git add code_coverage.txt
            git commit -m "Update code_coverage.txt"
            git push
          else
            echo "No changes to code coverage"
          fi
      - name: Load coverage data
        run: |
          echo "coverage=$(cat code_coverage.txt | grep -o -E '[0-9\.]+%' | awk '{print $1}')" >> $GITHUB_OUTPUT
      - name: Make Coverage Badge
        uses: action-badges/core@0.2.2
        with:
          label: coverage
          message: "${{ steps.load-coverage.outputs.coverage }}"
          message-color: brightgreen
          file-name: code_coverage.svg
          badge-branch: badges
          github-token: "${{ secrets.GITHUB_TOKEN }}"
